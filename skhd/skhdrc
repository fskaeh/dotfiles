# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

# Yabai Settings 
# focus space
cmd - right : yabai -m space --focus next
cmd - left  : yabai -m space --focus prev
cmd - 1     : yabai -m space --focus 1
cmd - 2     : yabai -m space --focus 2
cmd - 3     : yabai -m space --focus 3
cmd - 4     : yabai -m space --focus 4
cmd - 5     : yabai -m space --focus 5
cmd - 6     : yabai -m space --focus 6
cmd - 7     : yabai -m space --focus 7
cmd - 8     : yabai -m space --focus 8
cmd - 9     : yabai -m space --focus 9

# manipulate space
cmd - return            : yabai -m space --create; \
                          index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')"; \
                          yabai -m space --focus "${index}"
cmd + shift - return    : yabai -m space  --create; \
                          index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')"; \
                          yabai -m window --space "${index}"; \
                          yabai -m space --focus "${index}"
cmd + shift - backspace : yabai -m space --destroy
cmd + shift - space : yabai -m space --rotate 270
cmd + shift - b     : yabai -m space --layout bsp
cmd + shift - f     : yabai -m space --layout float
cmd + shift - s     : yabai -m space --layout stack

# focus window
ctrl - up    : yabai -m window --focus north
ctrl - right : yabai -m window --focus east
ctrl - down  : yabai -m window --focus south
ctrl - left  : yabai -m window --focus west
ctrl - 0x18     : yabai -m window --focus stack.next
ctrl - 0x1B     : yabai -m window --focus stack.prev

# move window
ctrl + shift - up    : yabai -m window --warp north
ctrl + shift - right : yabai -m window --warp east
ctrl + shift - down  : yabai -m window --warp south
ctrl + shift - left  : yabai -m window --warp west

# resize window
cmd + shift - f     : yabai -m window --toggle float; \
                      yabai -m window --grid 4:4:1:1:2:2
cmd + shift - s     : yabai -m window --stack next

# move focused window to space
cmd + shift - right  : yabai -m window --space next; yabai -m space --focus next
cmd + shift - left   : yabai -m window --space prev; yabai -m space --focus prev
cmd + shift - 1      : yabai -m window --space 1;    yabai -m space --focus 1
cmd + shift - 2      : yabai -m window --space 2;    yabai -m space --focus 2
cmd + shift - 3      : yabai -m window --space 3;    yabai -m space --focus 3
cmd + shift - 4      : yabai -m window --space 4;    yabai -m space --focus 4
cmd + shift - 5      : yabai -m window --space 5;    yabai -m space --focus 5
cmd + shift - 6      : yabai -m window --space 6;    yabai -m space --focus 6
cmd + shift - 7      : yabai -m window --space 7;    yabai -m space --focus 7
cmd + shift - 8      : yabai -m window --space 8;    yabai -m space --focus 8
cmd + shift - 9      : yabai -m window --space 9;    yabai -m space --focus 9